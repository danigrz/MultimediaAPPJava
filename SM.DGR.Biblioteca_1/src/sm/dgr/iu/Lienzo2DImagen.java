/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.dgr.iu;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 * @author Daniel Guerra Ruiz
 * @version 16/6/2015
 * Clase Lienzo2DImagen que extiende de Lienzo2D, esta clase se encarga de gestionar las im√°genes
 * @see Lienzo2D
 */
public class Lienzo2DImagen extends Lienzo2D {

    /**
     * Creates new form Lienzo2DImagen
     */
    
    private BufferedImage bufImg;

    
     /**
     * Constructor de Lienzo2DImagen
     */
    public Lienzo2DImagen() {
        initComponents();
    }
    
    
    /**
     * Metodo getImagen
     * Devuelve la imagen pintada con las figuras pintadas si es que se han pintado figuras, si no devuelve la imagen original
     * @param drawVector boolean
     * @return BufferedImage
     */
    
    public BufferedImage getImagen(boolean drawVector){
    if (drawVector) {
        BufferedImage img; 
        img = new BufferedImage(bufImg.getHeight(),bufImg.getWidth(),bufImg.TYPE_INT_ARGB);
        Graphics2D    graphics = img.createGraphics();
        if (this.bufImg.getColorModel().hasAlpha()) {
        setOpaque(false);
      }
      super.paint(graphics);
      return img;
    } 
    else
        return getImagen();        
    }
    
    /**
     * Metodo setImagen
     * Asigna una imagen con valores de ancho y alto
     * @param bf BufferedImage
     */
    
    
    
    public void setImagen(BufferedImage bf){
        bufImg = bf;
        if(bufImg!=null) {
        setPreferredSize(new Dimension(bufImg.getWidth(),bufImg.getHeight()));
        
        }   
    }

    /**
     * Metodo getImagen
     * Devuelve la imagen en el BufferedImage
     * @return BufferedImage
     */
    
    public BufferedImage getImagen(){
        return bufImg;
    }
    
    /**
     * Metodo paintComponent
     * Se encarga de pintar las figuras en la imagen
     * @param g Graphics
     */
    
    public void paintComponent(Graphics g){
    super.paintComponent(g);
    if(bufImg!=null) 
        g.drawImage(bufImg,0,0,this); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
